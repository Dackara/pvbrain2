substitutions:
  max_power: '3000'
  balance_loop_delay: '5s'

modbus:
  - id: ${inverter_name}_modbus
    uart_id: ${inverter_uart_id}
    send_wait_time: ${inverter_modbus_send_wait_time}
  
modbus_controller:
  - id: ${inverter_name}_modbus_controller
    address: ${inverter_modbus_address}
    modbus_id: ${inverter_name}_modbus
    command_throttle: ${inverter_modbus_throttle}
    setup_priority: -10
    update_interval: ${inverter_update_interval}
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_state
    id: ${inverter_name}_state
    address: 0x0200
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("waiting");
        case 1: return std::string("charging check");
        case 2: return std::string("charging");
        case 3: return std::string("discharging check");
        case 4: return std::string("discharging");
        case 5: return std::string("EPS");
        case 6: return std::string("fault");
        case 7: return std::string("permanent fault");
        default: return std::string("Unknown");
      }
      return x;

sensor:
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_power
    id: ${inverter_name}_battery_power
    address: 0x020D
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: 'W'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:lightning-bolt"
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_voltage
    id: ${inverter_name}_battery_voltage
    address: 0x020E
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: 'V'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:sine-wave"

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_current
    id: ${inverter_name}_battery_current
    address: 0x020F
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: 'A'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:current-dc"    

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_soc
    id: ${inverter_name}_soc
    address: 0x0210
    register_type: holding
    value_type: U_WORD
    filters:
      - calibrate_linear:
          - 20.0 -> 0.0
          - 100.0 -> 100.0
    unit_of_measurement: '%'
    device_class: energy
    accuracy_decimals: 0
    icon: "mdi:battery"
    state_class: measurement

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_temperature
    id: ${inverter_name}_battery_temperature
    address: 0x0211
    register_type: holding
    value_type: S_WORD
    filters:
      - multiply: 1
    unit_of_measurement: '°C'
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:thermometer-lines"

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_grid_power
    id: ${inverter_name}_grid_power
    address: 0x0212
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: 'W'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:lightning-bolt"

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_power
    id: ${inverter_name}_ac_output_power
    address: 0x0213
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'W'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:lightning-bolt"
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_power
    id: ${inverter_name}_pv_power
    address: 0x0215
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'W'
    device_class: power
    accuracy_decimals: 2
    icon: "mdi:lightning-bolt"
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_energy_generated_today
    id: ${inverter_name}_pv_energy_generated_today
    address: 0x0218
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:solar-power"
    state_class: total_increasing

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_energy_exported_today
    id: ${inverter_name}_energy_exported_today
    address: 0x0219
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:transmission-tower-export"
    state_class: total_increasing
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_energy_imported_today
    id: ${inverter_name}_energy_imported_today
    address: 0x021A
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:transmission-tower-import"
    state_class: total_increasing
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_energy_consumed_today
    id: ${inverter_name}_pv_energy_consumed_today
    address: 0x021B
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:lightning-bolt"
    state_class: total_increasing
        
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_charging_energy_today
    id: ${inverter_name}_battery_charging_energy_today
    address: 0x0224
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:battery-charging"
    state_class: total_increasing
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_discharging_energy_today
    id: ${inverter_name}_battery_discharging_energy_today
    address: 0x0225
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    unit_of_measurement: 'kWh'
    device_class: energy
    accuracy_decimals: 1
    icon: "mdi:battery-charging"
    state_class: total_increasing

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_internal_temperature
    id: ${inverter_name}_internal_temperature
    address: 0x0238
    register_type: holding
    value_type: S_WORD
    filters:
      - multiply: 1
    unit_of_measurement: '°C'
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:thermometer-lines"
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_inverter_heatsink_temperature
    id: ${inverter_name}_inverter_heatsink_temperature
    address: 0x0239
    register_type: holding
    value_type: S_WORD
    filters:
      - multiply: 1
    unit_of_measurement: '°C'
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:thermometer-lines"
      
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_battery_cycle
    id: ${inverter_name}_battery_cycle
    address: 0x022C
    register_type: holding
    value_type: U_WORD
    device_class: battery
    accuracy_decimals: 0
    icon: "mdi:battery-sync"

select:
  - platform: template
    name: ${name}_${inverter_name}_solar_mode
    id: ${inverter_name}_solar_mode
    options:
      - auto
      - battery_save
      - charge
      - discharge
    initial_option: auto
    optimistic: true
    restore_value: true
    on_value:
      - lambda: |-
          if (id(${inverter_name}_solar_mode).state == "auto") {
            ESP_LOGI("mode", "Mode set to auto");
            modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
            std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x03, 0x00, 0x00};
            modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
            controller->queue_command(command);
          } 
          else if (id(${inverter_name}_solar_mode).state == "battery_save") {
            ESP_LOGI("mode", "Mode set to battery_save");
          } 
          else if (id(${inverter_name}_solar_mode).state == "charge") {
            ESP_LOGI("mode", "Mode set to charge");
            int rate = min(${max_power}, (int) id(${inverter_name}_maximum_charging_power).state);
            ESP_LOGI("charging", "Forcing charge at %d W", rate);
            modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
            std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x02, (rate >> 8) & 0xFF, rate & 0xFF};
            modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
            controller->queue_command(command);
          } 
          else if (id(${inverter_name}_solar_mode).state == "discharge") {
            ESP_LOGI("mode", "Mode set to discharge");
            int rate = min(${max_power}, (int) id(${inverter_name}_maximum_discharging_power).state);
            ESP_LOGI("discharging", "Forcing discharge at %d W", rate);
            modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
            std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x1, (rate >> 8) & 0xFF, rate & 0xFF};
            modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
            controller->queue_command(command);
          }

number:
  - platform: template
    name: ${name}_${inverter_name}_maximum_charging_power
    id: ${inverter_name}_maximum_charging_power
    icon: "mdi:lightning-bolt"
    unit_of_measurement: 'W'
    device_class: power 
    optimistic: true
    min_value: 0
    max_value: ${max_power}
    restore_value: true
    initial_value: ${max_power}
    step: 1
    on_value:
      - lambda: |-
          if (id(${inverter_name}_solar_mode).state == "charge") {
            ESP_LOGI("charging", "Changing charge rate to %d", x);
            int rate = min(${max_power}, (int) x);
            ESP_LOGI("charging", "Forcing charge at %d W", rate);
            modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
            std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x02, (rate >> 8) & 0xFF, rate & 0xFF};
            modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
            controller->queue_command(command);
          }
          
  - platform: template
    name: ${name}_${inverter_name}_maximum_discharging_power
    id: ${inverter_name}_maximum_discharging_power
    icon: "mdi:lightning-bolt"
    unit_of_measurement: 'W'
    device_class: power 
    optimistic: true
    min_value: 0
    max_value: ${max_power}
    restore_value: true
    initial_value: ${max_power}
    step: 1
    on_value:
      - lambda: |-
          if (id(${inverter_name}_solar_mode).state == "discharge") {
            ESP_LOGI("discharging", "Changing discharge rate to %d", x);
            int rate = min(${max_power}, (int) x);
            ESP_LOGI("discharging", "Forcing discharge at %d W", rate);
            modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
            std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x1, (rate >> 8) & 0xFF, rate & 0xFF};
            modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
            controller->queue_command(command);
          }

interval:
  - interval: ${balance_loop_delay}
    then:
        - lambda: |-
            if (id(${inverter_name}_solar_mode).state == "battery_save") {
              float balance_power = id(${inverter_name}_pv_power).state - id(${inverter_name}_ac_output_power).state;
              ESP_LOGD("balance", "solar power - load power =  %.2f", balance_power);
              // prevent discharge
              int rate = max(0, (int) (balance_power));
              rate = min(${max_power}, rate);
              ESP_LOGD("balancing", "Charging at rate of %d W", rate);
              modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
              std::vector<uint8_t> payload = {0x1, 0x42, 0x01, 0x02, (rate >> 8) & 0xFF, rate & 0xFF};
              modbus_controller::ModbusCommandItem command = modbus_controller::ModbusCommandItem::create_custom_command(controller, payload);
              controller->queue_command(command);
            }