packages:
  deye_nominal: !include device_deye_nominal.yaml
  deye_advanced: !include device_deye_advanced.yaml

# modbus:
 # - id: ${inverter_name}_modbus_${inverter_suffix}
   # uart_id: ${inverter_uart_id}
   ## flow_control_pin: 4
   
# modbus_controller:
 # - id: ${inverter_name}_modbus_controller_${inverter_suffix}
   # address: ${inverter_modbus_address}
   # modbus_id: ${inverter_name}_modbus_${inverter_suffix}
   # command_throttle: ${inverter_modbus_throttle}
   # setup_priority: -10
   # update_interval: ${inverter_update_interval}

# binary_sensor:           
  # - platform: modbus_controller            # 194 Grid Connected Status
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_connected_status_${inverter_suffix}
    # id: ${inverter_name}_grid_connected_status_${inverter_suffix}
    # register_type: holding
    # address: 194
    
# sensor:
  # - platform: modbus_controller            # 013 Firmware Control Board
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_firmware_control_board_${inverter_suffix}
    # id: ${inverter_name}_firmware_control_board_${inverter_suffix}
    # register_type: holding
    # address: 13

  # - platform: modbus_controller            # 014 Firmware Comms Board
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_firmware_comms_board_${inverter_suffix}
    # id: ${inverter_name}_firmware_comms_board_${inverter_suffix}
    # register_type: holding
    # address: 14

  # - platform: modbus_controller            # 070 Battery Charge Day
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_charge_day_${inverter_suffix}
    # id: ${inverter_name}_battery_charge_day_${inverter_suffix}
    # register_type: holding
    # address: 70
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 071 Battery Discharge Day
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_discharge_day_${inverter_suffix}
    # id: ${inverter_name}_battery_discharge_day_${inverter_suffix}
    # register_type: holding
    # address: 71
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 072 Battery Charge Energy Total
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_battery_charge_${inverter_suffix}
    # id: ${inverter_name}_total_battery_charge_${inverter_suffix}
    # register_type: holding
    # address: 72
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_DWORD_R
    # filters:
     # - multiply: 0.1

  # - platform: modbus_controller            # 074 Battery Discharge Energy Total
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_battery_discharge_${inverter_suffix}
    # id: ${inverter_name}_total_battery_discharge_${inverter_suffix}
    # register_type: holding
    # address: 74
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 0
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_DWORD_R
    # filters:
     # - multiply: 0.1

  # - platform: modbus_controller            # 076 Grid Import Day (Buy)
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_import_day_${inverter_suffix}
    # id: ${inverter_name}_grid_import_day_${inverter_suffix}
    # register_type: holding
    # address: 76
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 078 Grid Import Energy Total (Buy)
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_grid_import_${inverter_suffix}
    # id: ${inverter_name}_total_grid_import_${inverter_suffix}
    # register_type: holding
    # address: 78
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 079 Grid Frequency
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_frequency_${inverter_suffix}
    # id: ${inverter_name}_grid_frequency_${inverter_suffix}
    # register_type: holding
    # address: 79
    # unit_of_measurement: 'Hz'
    # accuracy_decimals: 2
    # filters:
      # - multiply: 0.01
    # value_type: U_WORD
    # state_class: measurement

  # - platform: modbus_controller            # 081 Grid Export Energy Total (Sell)
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_grid_export_${inverter_suffix}
    # id: ${inverter_name}_total_grid_export_${inverter_suffix}
    # register_type: holding
    # address: 81
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 084 Daily Load
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_daily_load_power_${inverter_suffix}
    # id: ${inverter_name}_daily_load_power_${inverter_suffix}
    # register_type: holding
    # address: 84
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 085 Total Load
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_load_power_${inverter_suffix}
    # id: ${inverter_name}_total_load_power_${inverter_suffix}
    # register_type: holding
    # address: 85
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_DWORD_R
    # filters:
      # - multiply: 0.1

############################################# TEMPERATURE ################################################
            
  # - platform: modbus_controller            # 090 DC Transformer Temperature
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_dc_transformer_temperature_${inverter_suffix}
    # id: ${inverter_name}_dc_transformer_temperature_${inverter_suffix}
    # register_type: holding
    # address: 090
    # unit_of_measurement: '°C'
    # accuracy_decimals: 1
    # device_class: temperature
    # state_class: measurement
    # value_type: S_WORD
    # filters:
      # - offset: -1000
      # - multiply:  0.1

  # - platform: modbus_controller            # 091 Radiator Temperature
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_dc_radiator_temperature_${inverter_suffix}
    # id: ${inverter_name}_dc_radiator_temperature_${inverter_suffix}
    # register_type: holding
    # address: 091
    # unit_of_measurement: '°C'
    # accuracy_decimals: 1
    # device_class: temperature
    # state_class: measurement
    # value_type: S_WORD
    # filters:
      # - offset: -1000
      # - multiply:  0.1

      ####### statistics   ##########
      
  # - platform: modbus_controller            # 096 PV Energy Total
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_pv_power_${inverter_suffix}
    # id: ${inverter_name}_total_pv_power_${inverter_suffix}
    # register_type: holding
    # address: 96
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_DWORD_R  

  # - platform: modbus_controller            # 108 Day PV Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_daily_pv_power_${inverter_suffix}
    # id: ${inverter_name}_daily_pv_power_${inverter_suffix}
    # register_type: holding
    # address: 108
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 109 DC1 Voltage
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv1_voltage_${inverter_suffix}
    # id: ${inverter_name}_pv1_voltage_${inverter_suffix}
    # register_type: holding
    # address: 109
    # unit_of_measurement: 'V'
    # device_class: voltage
    # state_class: measurement
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 111 DC2 Voltage
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv2_voltage_${inverter_suffix}
    # id: ${inverter_name}_pv2_voltage_${inverter_suffix}
    # register_type: holding
    # address: 111
    # unit_of_measurement: 'V'
    # filters:
      # - multiply: 0.1
    # device_class: voltage
    # state_class: measurement
    # value_type: U_WORD

  # - platform: modbus_controller            # 110 DC1 Output Current
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv1_current_${inverter_suffix}
    # id: ${inverter_name}_pv1_current_${inverter_suffix}
    # register_type: holding
    # address: 110
    # unit_of_measurement: 'A'
    # accuracy_decimals: 1
    # device_class: current
    # state_class: measurement
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 112 DC2 Output Current
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv2_current_${inverter_suffix}
    # id: ${inverter_name}_pv2_current_${inverter_suffix}
    # register_type: holding
    # address: 112
    # unit_of_measurement: 'A'
    # accuracy_decimals: 1
    # device_class: current
    # state_class: measurement
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 154 Grid Inverter Voltage
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_voltage_${inverter_suffix}
    # id: ${inverter_name}_grid_voltage_${inverter_suffix}
    # register_type: holding
    # address: 154
    # unit_of_measurement: 'V'
    # accuracy_decimals: 1
    # device_class: voltage
    # state_class: measurement
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD 

  # - platform: modbus_controller            # 164 Inverter Output Current
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_ac_output_current_${inverter_suffix}
    # id: ${inverter_name}_ac_output_current_${inverter_suffix}
    # register_type: holding
    # address: 164
    # unit_of_measurement: 'A'
    # accuracy_decimals: 1
    # device_class: current
    # state_class: measurement
    # value_type: S_WORD
    # filters:
      # - multiply: 0.01

  # - platform: modbus_controller            # 166 Aux Output Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_aux_output_power_${inverter_suffix}
    # id: ${inverter_name}_aux_output_power_${inverter_suffix}
    # register_type: holding
    # address: 166
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: S_WORD

  # - platform: modbus_controller             # 167 Grid Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_power_167_${inverter_suffix}
    # id: ${inverter_name}_grid_power_167_${inverter_suffix}
    # register_type: holding
    # address: 167
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: S_WORD

  # - platform: modbus_controller             # 169 Grid Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_power_${inverter_suffix}
    # id: ${inverter_name}_grid_power_${inverter_suffix}
    # register_type: holding
    # address: 169
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: S_WORD
    
  # - platform: modbus_controller            # 172 Grid External Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_external_power_${inverter_suffix}
    # id: ${inverter_name}_grid_external_power_${inverter_suffix}
    # register_type: holding
    # address: 172
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: S_WORD

  # - platform: modbus_controller            # 175 Inverter Output Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_active_power_${inverter_suffix}
    # id: ${inverter_name}_active_power_${inverter_suffix}
    # register_type: holding
    # address: 175
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # value_type: S_WORD

  # - platform: modbus_controller            # 178 Load Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_load_power_${inverter_suffix}
    # id: ${inverter_name}_load_power_${inverter_suffix}
    # register_type: holding
    # address: 178
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: S_WORD

  
  # - platform: modbus_controller            # 182 Battery Temperature
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_temperature_${inverter_suffix}
    # id: ${inverter_name}_battery_temperature_${inverter_suffix}
    # register_type: holding
    # address: 182
    # unit_of_measurement: '°C'
    # accuracy_decimals: 1
    # device_class: temperature
    # state_class: measurement
    # value_type: U_WORD 
    # filters:
      # - offset: -1000
      # - multiply: 0.1

  # - platform: modbus_controller            # 183 Battery Voltage
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_voltage_${inverter_suffix}
    # id: ${inverter_name}_battery_voltage_${inverter_suffix}
    # register_type: holding
    # address: 183
    # unit_of_measurement: 'V'
    # accuracy_decimals: 1
    # device_class: voltage
    # state_class: measurement
    # filters:
      # - multiply: 0.01
    # value_type: U_WORD

  # - platform: modbus_controller            # 184 Battery SOC
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_soc_${inverter_suffix}
    # id: ${inverter_name}_battery_soc_${inverter_suffix}
    # register_type: holding
    # address: 184
    # unit_of_measurement: '%'
    # accuracy_decimals: 0
    # device_class: battery
    # value_type: U_WORD

  # - platform: modbus_controller            # 186 PV1 Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv1_power_${inverter_suffix}
    # id: ${inverter_name}_pv1_power_${inverter_suffix}
    # register_type: holding
    # address: 186
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: U_WORD
    
  # - platform: modbus_controller            # 187 PV2 Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_pv2_power_${inverter_suffix}
    # id: ${inverter_name}_pv2_power_${inverter_suffix}
    # register_type: holding
    # address: 187
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # value_type: U_WORD

  # - platform: template                   # Sum of PV1 and PV2 to get total PV Power
    # name: ${name}_${inverter_name}_total_solar_${inverter_suffix}
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # lambda: |-
      # return (id(${inverter_name}_pv1_power_${inverter_suffix}).state + id(${inverter_name}_pv2_power_${inverter_suffix}).state);
    # update_interval: ${inverter_template_update}

  # - platform: modbus_controller            # 190 Battery Output Power
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_output_power_${inverter_suffix}
    # id: ${inverter_name}_sunsynk_esphome_battery_output_power_${inverter_suffix}
    # register_type: holding
    # address: 190
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # value_type: S_WORD

  # - platform: modbus_controller            # 191 Battery Output Current
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_output_current_${inverter_suffix}
    # id: ${inverter_name}_battery_output_current_${inverter_suffix}
    # register_type: holding
    # address: 191
    # unit_of_measurement: 'A'
    # accuracy_decimals: 1
    # device_class: current
    # state_class: measurement
    # value_type: S_WORD
    # filters:
      # - multiply: 0.01

  # - platform: modbus_controller            # 192 Load Frequency
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_load_frequency_${inverter_suffix}
    # id: ${inverter_name}_load_frequency_${inverter_suffix}
    # register_type: holding
    # address: 192
    # unit_of_measurement: 'Hz'
    # accuracy_decimals: 2
    # filters:
      # - multiply: 0.01
    # value_type: U_WORD
    # state_class: measurement

  # - platform: modbus_controller            # 217 Battery Capacity Shutdown
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_capacity_shutdown_${inverter_suffix}
    # id: ${inverter_name}_battery_capacity_shutdown_${inverter_suffix}
    # register_type: holding
    # address: 217
    # unit_of_measurement: '%'
    # accuracy_decimals: 0
    # device_class: battery

  # - platform: template                   # Essential Power based on register 175 + 167 -166
    # name: ${name}_${inverter_name}_essential_power_${inverter_suffix}
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # lambda: |-
      # return (id(${inverter_name}_active_power_${inverter_suffix}).state + id(${inverter_name}_grid_power_167_${inverter_suffix}).state - id(${inverter_name}_aux_output_power_${inverter_suffix}).state);
    # update_interval: ${inverter_template_update}

  # - platform: template                   # Essential Power based on register 175 + 169 -166
    # name: ${name}_${inverter_name}_essential_power_1_${inverter_suffix}
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # lambda: |-
      # return (id(${inverter_name}_active_power_${inverter_suffix}).state + id(${inverter_name}_grid_power_${inverter_suffix}).state - id(${inverter_name}_aux_output_power_${inverter_suffix}).state);
    # update_interval: ${inverter_template_update}

  # - platform: template                   # Nonessential Power 175 - 167
    # name: ${name}_${inverter_name}_nonessential_power_${inverter_suffix}
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # lambda: |-
      # return (id(${inverter_name}_grid_external_power_${inverter_suffix}).state - id(${inverter_name}_grid_power_167_${inverter_suffix}).state);
    # update_interval: ${inverter_template_update}

  # - platform: template                   # Nonessential Power 175 - 169
    # name: ${name}_${inverter_name}_nonessential_power_1_${inverter_suffix}
    # unit_of_measurement: 'W'
    # accuracy_decimals: 0
    # device_class: power
    # state_class: measurement
    # lambda: |-
      # return (id(${inverter_name}_grid_external_power_${inverter_suffix}).state - id(${inverter_name}_grid_power_${inverter_suffix}).state);
    # update_interval: ${inverter_template_update}


############################################ ENERGY ################################################

  # - platform: modbus_controller            # 070 Day Battery Charge
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_battery_charge_${inverter_suffix}
    # id: ${inverter_name}_day_battery_charge_${inverter_suffix}
    # register_type: holding
    # address: 70
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 071 Day Battery Discharge
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_battery_discharge_${inverter_suffix}
    # id: ${inverter_name}_day_battery_discharge_${inverter_suffix}
    # register_type: holding
    # address: 71
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1


  # - platform: modbus_controller            # 076 Day Grid Import
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_grid_import_${inverter_suffix}
    # id: ${inverter_name}_day_grid_import_${inverter_suffix}
    # register_type: holding
    # address: 76
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 077 Day Grid Export
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_grid_export_${inverter_suffix}
    # id: ${inverter_name}_day_grid_export_${inverter_suffix}
    # register_type: holding
    # address: 77
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_WORD
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 084 Day Load Energy
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_load_energy_${inverter_suffix}
    # id: ${inverter_name}_day_load_energy_${inverter_suffix}
    # register_type: holding
    # address: 84
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD

  # - platform: modbus_controller            # 085 Total Load Energy
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_load_energy_${inverter_suffix}
    # id: ${inverter_name}_total_load_energy_${inverter_suffix}
    # register_type: holding
    # address: 85
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # value_type: U_DWORD_R
    # filters:
      # - multiply: 0.1

  # - platform: modbus_controller            # 096 Total PV Energy
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_total_pv_energy_${inverter_suffix}
    # id: ${inverter_name}_total_pv_energy_${inverter_suffix}
    # register_type: holding
    # address: 96
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 2
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_DWORD_R  

  # - platform: modbus_controller            # 108 Day PV Energy
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_day_pv_energy_${inverter_suffix}
    # id: ${inverter_name}_day_pv_energy_${inverter_suffix}
    # register_type: holding
    # address: 108
    # unit_of_measurement: 'kWh'
    # accuracy_decimals: 1
    # device_class: energy
    # state_class: total_increasing
    # filters:
      # - multiply: 0.1
    # value_type: U_WORD
 
############################################# READ SETTINGS #############################################
 
    
  # - platform: modbus_controller          # 250 Settings Timezone1
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone1_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone1_${inverter_suffix}
    # register_type: holding
    # address: 250
    # filters: #GOOD
      # - lambda: |-
            # if (x > 32767) return (x - 65535) /1;
            # else return (x) /1;
    # icon: "mdi:clock"

  # - platform: modbus_controller          # 251 Settings Timezone2
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone2_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone2_${inverter_suffix}
    # register_type: holding
    # address: 251   
    # filters: #GOOD
      # - lambda: |-
            # if (x > 32767) return (x - 65535) /1;
            # else return (x) /1;
    # icon: "mdi:clock"

  # - platform: modbus_controller          # 252 Settings Timezone3
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone3_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone3_${inverter_suffix}
    # register_type: holding
    # address: 252
    # filters: #GOOD
      # - lambda: |-
            # if (x > 32767) return (x - 65535) /1;
            # else return (x) /1;
    # icon: "mdi:clock"

  # - platform: modbus_controller          # 253 Settings Timezone4
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone4_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone4_${inverter_suffix}
    # register_type: holding
    # address: 253
    # icon: "mdi:clock"

  # - platform: modbus_controller          # 254 Settings Timezone5
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone5_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone5_${inverter_suffix}
    # register_type: holding
    # address: 254
    # filters: #GOOD
      # - lambda: |-
            # if (x > 32767) return (x - 65535) /1;
            # else return (x) /1;
    # icon: "mdi:clock"

  # - platform: modbus_controller          # 255 Settings Timezone6
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_timezone6_${inverter_suffix}
    # id: ${inverter_name}_setting_timezone6_${inverter_suffix}
    # register_type: holding
    # address: 255
    # filters: #GOOD
      # - lambda: |-
            # if (x > 32767) return (x - 65535) /1;
            # else return (x) /1;
    # icon: "mdi:clock"


  # - platform: modbus_controller          # 268 Settings SoC Timezone1
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone1_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone1_${inverter_suffix}
    # register_type: holding
    # address: 268
    # value_type: U_WORD

  # - platform: modbus_controller          # 269 Settings SoC Timezone2
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone2_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone2_${inverter_suffix}
    # register_type: holding
    # address: 269
    # value_type: U_WORD

  # - platform: modbus_controller          # 270 Settings SoC Timezone3
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone3_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone3_${inverter_suffix}
    # register_type: holding
    # address: 270
    # value_type: U_WORD

  # - platform: modbus_controller          # 271 Settings SoC Timezone4
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone4_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone4_${inverter_suffix}
    # register_type: holding
    # address: 271
    # value_type: U_WORD

  # - platform: modbus_controller          # 272 Settings SoC Timezone5
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone5_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone5_${inverter_suffix}
    # register_type: holding
    # address: 272
    # value_type: U_WORD

  # - platform: modbus_controller          # 273 Settings SoC Timezone6
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_soc_timezone6_${inverter_suffix}
    # id: ${inverter_name}_setting_soc_timezone6_${inverter_suffix}
    # register_type: holding
    # address: 273
    # value_type: U_WORD

  # - platform: modbus_controller          # 274 Settings Grid Charge Timezone1
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone1_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone1_${inverter_suffix}
    # register_type: holding
    # address: 274

  # - platform: modbus_controller          # 275 Settings Grid Charge Timezone2
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone2_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone2_${inverter_suffix}
    # register_type: holding
    # address: 275
    
  # - platform: modbus_controller          # 276 Settings Grid Charge Timezone3
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone3_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone3_${inverter_suffix}
    # register_type: holding
    # address: 276
    
  # - platform: modbus_controller          # 277 Settings Grid Charge Timezone4
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone4_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone4_${inverter_suffix}
    # register_type: holding
    # address: 277
    
  # - platform: modbus_controller          # 278 Settings Grid Charge Timezone5
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone5_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone5_${inverter_suffix}
    # register_type: holding
    # address: 278
    
  # - platform: modbus_controller          # 279 Settings Grid Charge Timezone6
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_setting_grid_charge_timezone6_${inverter_suffix}
    # id: ${inverter_name}_setting_grid_charge_timezone6_${inverter_suffix}
    # register_type: holding
    # address: 279
    
  # - platform: modbus_controller        # 255 Grid Peak Shaving raw register value
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # id: ${inverter_name}_grid_peak_shaving_raw_${inverter_suffix}
    # register_type: holding
    # address: 280
    # value_type: U_WORD
    
    
# switch:
  # - platform: modbus_controller          # 247 Toggle Solar Sell
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_toggle_solar_sell_${inverter_suffix}
    # id: ${inverter_name}_toggle_solar_sell_${inverter_suffix}
    # register_type: holding
    # address: 247
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"
  
  # - platform: modbus_controller          # 243 Priority Load
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_toggle_priority_load_${inverter_suffix}
    # id: ${inverter_name}_toggle_priority_load_${inverter_suffix}
    # register_type: holding
    # address: 243
    # bitmask: 1
    # icon: "mdi:toggle-switch"
  
  # - platform: modbus_controller          # 326 Toggle Force Generator
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_toggle_force_generator_${inverter_suffix}
    # id: ${inverter_name}_toggle_force_generator_${inverter_suffix}
    # register_type: holding
    # address: 326
    # bitmask: 8192 # 2^13 to target bit 13
    # icon: "mdi:toggle-switch"  


    
  # - platform: modbus_controller          # 248 Toggle System Timer
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_toggle_system_timer_${inverter_suffix}
    # id: ${inverter_name}_toggle_system_timer_${inverter_suffix}
    # register_type: holding
    # address: 248
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"
    
  # - platform: modbus_controller          # 274 Toggle Grid Charge Timezone1
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone1_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone1_${inverter_suffix}
    # register_type: holding
    # address: 274
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

  # - platform: modbus_controller          # 275 Toggle Grid Charge Timezone2
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # use_write_multiple: true
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone2_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone2_${inverter_suffix}
    # register_type: holding
    # address: 275
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

  # - platform: modbus_controller          # 276 Toggle Grid Charge Timezone3
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # use_write_multiple: true
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone3_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone3_${inverter_suffix}
    # register_type: holding
    # address: 276
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

  # - platform: modbus_controller          # 277 Toggle Grid Charge Timezone4
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # use_write_multiple: true
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone4_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone4_${inverter_suffix}
    # register_type: holding
    # address: 277
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

  # - platform: modbus_controller          # 278 Toggle Grid Charge Timezone5
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # use_write_multiple: true
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone5_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone5_${inverter_suffix}
    # register_type: holding
    # address: 278
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

  # - platform: modbus_controller          # 279 Toggle Grid Charge Timezone6
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # use_write_multiple: true
    # name: ${name}_${inverter_name}_toggle_grid_charge_timezone6_${inverter_suffix}
    # id: ${inverter_name}_toggle_grid_charge_timezone6_${inverter_suffix}
    # register_type: holding
    # address: 279
    # bitmask: 1
    # entity_category: config
    # icon: "mdi:toggle-switch"

# number:

  # - platform: modbus_controller         # 230 Grid Charge Battery current
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_charge_battery_current_${inverter_suffix}
    # id: ${inverter_name}_grid_charge_battery_current_${inverter_suffix}
    # unit_of_measurement: 'A'
    # address: 230
    # min_value: 0
    # max_value: 185
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 210 Battery Max Charge current
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_max_charge_current_${inverter_suffix}
    # id: ${inverter_name}_battery_max_charge_current_${inverter_suffix}
    # unit_of_measurement: 'A'
    # address: 210
    # min_value: 5
    # max_value: 185
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 211 Battery Max Discharge current
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_battery_max_discharge_current_${inverter_suffix}
    # id: ${inverter_name}_battery_max_discharge_current_${inverter_suffix}
    # unit_of_measurement: 'A'
    # address: 211
    # min_value: 0
    # max_value: 185
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller            # 293 Grid Peak Shaving Power
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_peak_shaving_power_${inverter_suffix}
    # id: ${inverter_name}_grid_peak_shaving_power_${inverter_suffix}
    # address: 293
    # unit_of_measurement: 'W'
    # min_value: 0
    # max_value: 8000
    # step: 500
    # value_type: U_WORD

  # - platform: modbus_controller            # 245 Max Sell Power
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_max_sell_power_${inverter_suffix}
    # id: ${inverter_name}_max_sell_power_${inverter_suffix}
    # address: 245
    # unit_of_measurement: 'W'
    # min_value: 0
    # max_value: 8000
    # step: 500
    # value_type: U_WORD

    ########### timezone ####

  # - platform: modbus_controller         # 268 Settings SoC Timezone1
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone1_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone1_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 268
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 269 Settings SoC Timezone2
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone2_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone2_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 269
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 270 Settings SoC Timezone3
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone3_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone3_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 270
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 271 Settings SoC Timezone4
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone4_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone4_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 271
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 272 Settings SoC Timezone5
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone5_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone5_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 272
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  

  # - platform: modbus_controller         # 273 Settings SoC Timezone6
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_set_soc_timezone6_${inverter_suffix}
    # id: ${inverter_name}_set_soc_timezone6_${inverter_suffix}
    # unit_of_measurement: '%'
    # address: 273
    # min_value: 0
    # max_value: 100
    # step: 5
    # value_type: U_WORD  
    
############################################## SELECT SENSORS ################################################

# select:
  # - platform: modbus_controller                   #243 Select Energy Patern
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_energy_pattern_${inverter_suffix}
    # id: ${inverter_name}_energy_pattern_${inverter_suffix}
    # address: 243
    # value_type: U_WORD
    # optionsmap:
      # "Battery first": 0
      # "Load first": 1   
         
  # - platform: modbus_controller                   #244 Select Work Mode
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_work_mode_${inverter_suffix}
    # id: ${inverter_name}_work_mode_${inverter_suffix}
    # address: 244
    # value_type: U_WORD
    # optionsmap:
      # "Selling First": 0
      # "Zero Export + Limit to Load Only": 1
      # "Limited to Home": 2    

  # - platform: modbus_controller                  #280 Select Grid Peak Shaving
    # use_write_multiple: true
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_grid_peak_shaving_${inverter_suffix}
    # id: ${inverter_name}_grid_peak_shaving_${inverter_suffix}
    # address: 280
    # value_type: U_WORD
    # optionsmap:
      # "Disabled": 0
      # "Enabled": 256
    # lambda: |-
      # // we are only interested in the 8th bit binary 0001 0000 0000 need to map the options 0, 256 in select 
      # //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      # //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0100));
      # if ((x & 0x0100) == 0)
        # return  std::string("Disabled");
      # if ((x & 0x0100) == 256)
        # return  std::string("Enabled");
      # return {};
    # write_lambda: |-
      # //ESP_LOGE("main","Modbus write gets = %d",value);
      # uint16_t unmodified =  id(${inverter_name}_grid_peak_shaving_raw_${inverter_suffix}).state;
      # //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      # // optionsmap should only return 2 values... 0 , 256 so bitmask with complement 0x0100 to ensure we keep the original values in register. Then appply OR with the value that was chosen
      # uint16_t modified = ((unmodified & ~0x0100) | value);
      # //ESP_LOGE("main","Modbus write to write = %d", modified);
      # return modified;    
    

############################################## TEMPLATE SENSORS ################################################

# text_sensor:
  # - platform: modbus_controller            # 059 Overall State
    # modbus_controller_id: ${inverter_name}_modbus_controller_${inverter_suffix}
    # name: ${name}_${inverter_name}_overall_state_${inverter_suffix}
    # id: ${inverter_name}_overall_state_${inverter_suffix}
    # register_type: holding
    # raw_encode: HEXBYTES
    # address: 59
    # lambda: |- 
      # uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      # switch (value) {
        # case 0: return std::string("standby");
        # case 1: return std::string("selftest");
        # case 2: return std::string("normal");
        # case 3: return std::string("alarm");
        # case 4: return std::string("fault");
        # default: return std::string("unknown");
      # }
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_1_${inverter_suffix}
    # id: ${inverter_name}_time_slot_1_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone1_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone1_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone1_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_2_${inverter_suffix}
    # id: ${inverter_name}_time_slot_2_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone2_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone2_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone2_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_3_${inverter_suffix}
    # id: ${inverter_name}_time_slot_3_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone3_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone3_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone3_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_4_${inverter_suffix}
    # id: ${inverter_name}_time_slot_4_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone4_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone4_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone4_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_5_${inverter_suffix}
    # id: ${inverter_name}_time_slot_5_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone5_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone5_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone5_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);
  
  # - platform: template
    # name: ${name}_${inverter_name}_time_slot_6_${inverter_suffix}
    # id: ${inverter_name}_time_slot_6_${inverter_suffix}
    # lambda: |-
        # int minutes, hours;
        # if (id(${inverter_name}_setting_timezone6_${inverter_suffix}).state) {
        # minutes = static_cast<int>(id(${inverter_name}_setting_timezone6_${inverter_suffix}).state) % 100;
        # hours = static_cast<int>(id(${inverter_name}_setting_timezone6_${inverter_suffix}).state) / 100;
        # } else {
          # minutes = 0;
          # hours = 0;
        # }
        # char formatted_time[6];
        # snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        # return esphome::optional<std::string>(formatted_time);