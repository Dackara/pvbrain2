sensor:
  - platform: copy
    source_id: ${ats_control_voltage_id}
    id: ${ats_control_name}_${ats_control_sufix}
    on_value:
       - if:  ##### if battery voltage < low battery threshold    ######
          condition:
            and:
              - switch.is_on: ${ats_control_id}
              - lambda: |-
                 return ( ( float(id(${ats_control_voltage_id}).state) < float(id(${ats_control_solar_to_grid_voltage_threshold_id}).state) )     );            
          then:
            - script.execute: script_from_solar_to_grid
 
       - if:  ##### if battery voltage > high battery threshold    ######
          condition:
            and: 
              - switch.is_on: ${ats_control_id}
              - lambda: |-
                  return ( ( float(id(${ats_control_voltage_id}).state) > float(id(${ats_control_grid_to_solar_voltage_threshold_id}).state) )     );            
          then:
            - script.execute: script_from_grid_to_solar
            
script:
  - id: script_from_solar_to_grid
    then:
      - if:  ##### cas 1 (principal) on teste si AC_in:off, onduleur:on, ENEDIS:on => sequence solar to grid #### 
          condition:
            and:
              - binary_sensor.is_off: ${ats_control_grid_input}
              - binary_sensor.is_on: ${ats_control_inverter_switch}  
              - binary_sensor.is_on: ${ats_control_grid}
          then:
            - switch.turn_on: ${ats_control_relay_ats_id}  ### switch to grid source
            - delay: 2s
            - switch.turn_off: ${ats_control_relay_inverter_id} ### turn off solar inverter
      # - if:  ##### cas 2 (rare) on teste si AC_in:on, onduleur:on => ####
          # condition:
            # and:
              # - binary_sensor.is_on: ${name}_${inverter}_grid_input_on
              # - binary_sensor.is_on: ${name}_${inverter}_switch_on  
          # then:
            # - switch.turn_off: ${name}_relay_${ats}_solar_input
            
  - id: script_from_grid_to_solar
    then:
      # - logger.log:
          # format: "grid_input_on %d, switch_on %d"
          # args: [ 'id(pvbrain_axpert_grid_input_on).state', 'id(pvbrain_axpert_switch_on).state' ]              
      - if:
          condition:
            and:
              - binary_sensor.is_off: ${ats_control_grid_input}
              - binary_sensor.is_off: ${ats_control_inverter_switch}
 #             - binary_sensor.is_on: ${ats_control_solar}
          then:
            - switch.turn_on: ${ats_control_relay_inverter_id}  ### turn on solar inverter
            - delay: 13s
            - switch.turn_off: ${ats_control_relay_ats_id}  ### switch to solar           
