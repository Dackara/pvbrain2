globals:
  - id: ${powermeter_name}_energy_yesteday_global
    type: float
    restore_value: yes
    
time:
  - platform: homeassistant #sntp
    id: !extend my_time
    on_time:
      - seconds: 59
        minutes: 59
        hours: 23
        then:  
          - globals.set:
              id: ${powermeter_name}_energy_yesteday_global
              value: !lambda return ( id(${powermeter_name}_energy_yesteday_global) =  float( id(${powermeter_name}_energy_today).state) );         
 
# modbus:
   # - id: ${pzemdc_name}_modbus
     # uart_id: ${pzemdc_uart_id}
     # send_wait_time: ${pzemdc_modbus_send_wait_time}
   
button:
  - platform: template
    name: ${name}_${powermeter_name}_reset_energy
    on_press:
      then:
        - pzemdc.reset_energy: ${powermeter_name}_id
   
sensor:
  - platform: pzemdc
    modbus_id: ${powermeter_modbus_id}
    id: ${powermeter_name}_id
    address: ${powermeter_address}
    current:
      name: ${name}_${powermeter_name}_current
      id: ${powermeter_name}_current
      unit_of_measurement: 'A'
      accuracy_decimals: 2
      filters:
        - offset: ${powermeter_offset_current}
        - clamp:
            min_value: 0
            ignore_out_of_range: true
    voltage:
      name: ${name}_${powermeter_name}_voltage
      id: ${powermeter_name}_voltage
      unit_of_measurement: "V"
      accuracy_decimals: 2
      filters:
        - offset: ${powermeter_offset_voltage}
        - clamp:
            min_value: 0
            ignore_out_of_range: true
    power:
      name: ${name}_${powermeter_name}_power
      id: ${powermeter_name}_power
      unit_of_measurement: 'W'
      accuracy_decimals: 1
      filters:
        - offset: ${powermeter_offset_power}
        - clamp:
            min_value: 0
            ignore_out_of_range: true
    energy:
      name: ${name}_${powermeter_name}_energy
      unit_of_measurement: 'Wh'
      accuracy_decimals: 1
      id: ${powermeter_name}_energy
    update_interval: ${powermeter_update_interval}
    
    
  - platform: template
    name: ${name}_${powermeter_name}_energy_total
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    update_interval: ${powermeter_template_update}
    icon: mdi:power
    lambda: return (( (id(${powermeter_name}_energy).state)/1000.0));
    
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_energy_today
    id: ${powermeter_name}_energy_today
    power_id: ${powermeter_name}_power
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${powermeter_name}_energy_yesteday
    id: ${powermeter_name}_energy_yesteday
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      return (id(${powermeter_name}_energy_yesteday).state = id(${powermeter_name}_energy_yesteday_global));
