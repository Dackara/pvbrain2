globals:
  - id: ${powermeter_name}_energy_imported_yesteday_global_${powermeter_sufix}
    type: float
    restore_value: yes
    
  - id: ${powermeter_name}_energy_exported_yesteday_global_${powermeter_sufix}
    type: float
    restore_value: yes
    
time:
  - platform: sntp
    id: my_time
    on_time:
      - seconds: 59
        minutes: 59
        hours: 23
        then:  
          - globals.set:
              id: ${powermeter_name}_energy_imported_yesteday_global_${powermeter_sufix}
              value: !lambda return ( id(${powermeter_name}_energy_imported_yesteday_global_${powermeter_sufix}) =  float( id(${powermeter_name}_energy_imported_today_${powermeter_sufix}).state) );         
          - globals.set:
              id: ${powermeter_name}_energy_exported_yesteday_global_${powermeter_sufix}
              value: !lambda return ( id(${powermeter_name}_energy_exported_yesteday_global_${powermeter_sufix}) =  float( id(${powermeter_name}_energy_exported_today_${powermeter_sufix}).state) );          
modbus:
  - id: ${powermeter_name}_modbus_${powermeter_sufix}
    uart_id: ${powermeter_uart_id}
    send_wait_time: ${powermeter_modbus_send_wait_time}
     
sensor:
  - platform: sdm_meter
    modbus_id: ${powermeter_name}_modbus_${powermeter_sufix}     
    id: ${powermeter_name}_sdm_${powermeter_sufix}
    phase_a:
      current:
        name: ${name}_${powermeter_name}_current_${powermeter_sufix}
      voltage:
        name: ${name}_${powermeter_name}_voltage_${powermeter_sufix}
      active_power:
        name: ${name}_${powermeter_name}_power_${powermeter_sufix}
        id: ${powermeter_name}_power_${powermeter_sufix}
      power_factor:
        name: ${name}_${powermeter_name}_power_factor_${powermeter_sufix}
      apparent_power:
        name: ${name}_${powermeter_name}_apparent_power_${powermeter_sufix}
      reactive_power:
        name: ${name}_${powermeter_name}_reactive_power_${powermeter_sufix}
      phase_angle:
        name: ${name}_${powermeter_name}_phase_angle_${powermeter_sufix}
    frequency:
      name: ${name}_${powermeter_name}_frequency_${powermeter_sufix}
    total_power:
      name: ${name}_${powermeter_name}_total_power_${powermeter_sufix}
    import_active_energy:
      name: ${name}_${powermeter_name}_energy_imported_${powermeter_sufix}
    export_active_energy:
      name: ${name}_${powermeter_name}_energy_exported_${powermeter_sufix}
    import_reactive_energy:
      name: ${name}_${powermeter_name}_reactive_energy_imported_${powermeter_sufix}
    export_reactive_energy:
      name: ${name}_${powermeter_name}_reactive_energy_exported_${powermeter_sufix}
    update_interval: ${powermeter_update_interval}

  - platform: template
    name: ${name}_${powermeter_name}_power_imported_${powermeter_sufix}
    id: ${powermeter_name}_power_imported_${powermeter_sufix}
    unit_of_measurement: 'W'
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      if (id(${powermeter_name}_power_${powermeter_sufix}).state > 0.0) {
        return id(${powermeter_name}_power_${powermeter_sufix}).state;
      } 
      else {
        return 0.0;
      }    
    
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_energy_imported_today_${powermeter_sufix}
    id: ${powermeter_name}_energy_imported_today_${powermeter_sufix}
    power_id: ${powermeter_name}_power_imported_${powermeter_sufix}
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter    
    
    
  - platform: template
    name: ${name}_${powermeter_name}_energy_imported_yesteday_${powermeter_sufix}
    id: ${powermeter_name}_energy_imported_yesteday_${powermeter_sufix}
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      return (id(${powermeter_name}_energy_imported_yesteday_${powermeter_sufix}).state = id(${powermeter_name}_energy_imported_yesteday_global_${powermeter_sufix}));

  - platform: template
    name: ${name}_${powermeter_name}_power_exported_${powermeter_sufix}
    id: ${powermeter_name}_power_exported_${powermeter_sufix}
    unit_of_measurement: 'W'
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      if (id(${powermeter_name}_power_${powermeter_sufix}).state <= 0.0) {
        return id(${powermeter_name}_power_${powermeter_sufix}).state;
      } 
      else {
        return 0.0;
      }    
      
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_energy_exported_today_${powermeter_sufix}
    id: ${powermeter_name}_energy_exported_today_${powermeter_sufix}
    power_id: ${powermeter_name}_power_exported_${powermeter_sufix}
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter    
      
  - platform: template
    name: ${name}_${powermeter_name}_energy_exported_yesteday_${powermeter_sufix}
    id: ${powermeter_name}_energy_exported_yesteday_${powermeter_sufix}
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      return (id(${powermeter_name}_energy_exported_yesteday_${powermeter_sufix}).state = id(${powermeter_name}_energy_exported_yesteday_global_${powermeter_sufix}));      
    