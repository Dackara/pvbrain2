external_components:
  - source: github://syssi/esphome-jk-bms@main
    refresh: 0s
    
jk_modbus:
  - id: ${bms_name}_modbus
    uart_id: ${bms_uart_id}
jk_bms:
  - id: ${bms_name}_bms
    jk_modbus_id: ${bms_name}_modbus
    
globals:    
  - id: ${bms_name}_battery_charging_energy_yesteday_global
    type: float
    restore_value: yes
    
  - id: ${bms_name}_battery_discharging_energy_yesteday_global
    type: float
    restore_value: yes

time:
  platform: homeassistant #sntp
  id: my_time
  
  on_time:
    - seconds: 59
      minutes: 59
      hours: 23
      then:  
        - globals.set:
                id: ${bms_name}_battery_charging_energy_yesteday_global
                value: !lambda return ( id(${bms_name}_battery_charging_energy_yesteday_global) =  float( id(${bms_name}_battery_charging_energy_day).state) ); 
                
        - globals.set:
                id: ${bms_name}_battery_discharging_energy_yesteday_global
                value: !lambda return ( id(${bms_name}_battery_discharging_energy_yesteday_global) =  float( id(${bms_name}_battery_discharging_energy_day).state) );     
switch:
  - platform: jk_bms
    jk_bms_id: ${bms_name}_bms
    charging:
      name: ${name}_${bms_name}_charging
      id: ${bms_name}_charging
    discharging:
      name: ${name}_${bms_name}_discharging
      id: ${bms_name}_discharging
      
sensor:

  - platform: jk_bms
    jk_bms_id: ${bms_name}_bms
    min_cell_voltage:
      name: ${name}_${bms_name}_min_cell_voltage
    max_cell_voltage:
      name: ${name}_${bms_name}_max_cell_voltage
    min_voltage_cell:
      name: ${name}_${bms_name}_min_voltage_cell
    max_voltage_cell:
      name: ${name}_${bms_name}_max_voltage_cell
    delta_cell_voltage:
      name: ${name}_${bms_name}_delta_cell_voltage
    average_cell_voltage:
      name: ${name}_${bms_name}_average_cell_voltage
    cell_voltage_1:
      name: ${name}_${bms_name}_cell_voltage_1
    cell_voltage_2:
      name: ${name}_${bms_name}_cell_voltage_2
    cell_voltage_3:
      name: ${name}_${bms_name}_cell_voltage_3
    cell_voltage_4:
      name: ${name}_${bms_name}_cell_voltage_4
    cell_voltage_5:
      name: ${name}_${bms_name}_cell_voltage_5
    cell_voltage_6:
      name: ${name}_${bms_name}_cell_voltage_6
    cell_voltage_7:
      name: ${name}_${bms_name}_cell_voltage_7
    cell_voltage_8:
      name: ${name}_${bms_name}_cell_voltage_8
    cell_voltage_9:
      name: ${name}_${bms_name}_cell_voltage_9
    cell_voltage_10:
      name: ${name}_${bms_name}_cell_voltage_10
    cell_voltage_11:
      name: ${name}_${bms_name}_cell_voltage_11
    cell_voltage_12:
      name: ${name}_${bms_name}_cell_voltage_12
    cell_voltage_13:
      name: ${name}_${bms_name}_cell_voltage_13
    cell_voltage_14:
      name: ${name}_${bms_name}_cell_voltage_14
    cell_voltage_15:
      name: ${name}_${bms_name}_cell_voltage_15
    cell_voltage_16:
      name: ${name}_${bms_name}_cell_voltage_16
    charging_power:
      name: ${name}_${bms_name}_battery_charging_power
      id: ${bms_name}_battery_charging_power
    discharging_power:
      name: ${name}_${bms_name}_battery_discharging_power
      id: ${bms_name}_battery_discharging_power
    # current_calibration:
    #   name: ${name}_${bms}_current_calibration
    power_tube_temperature:
      name: ${name}_${bms_name}_power_tube_temperature
    temperature_sensor_1:
      name: ${name}_${bms_name}_temperature_sensor_1
    temperature_sensor_2:
      name: ${name}_${bms_name}_temperature_sensor_2
    total_voltage:
      name: ${name}_${bms_name}_total_voltage
      id: ${name}_${bms_name}_total_voltage
    power:
      name: ${name}_${bms_name}_power 
         
    current:
      name: ${name}_${bms_name}_current
      id: ${bms_name}_current
#      filters:
#        - multiply: -1
    capacity_remaining:
      name: ${name}_${bms_name}_capacity_remaining
      id: ${bms_name}_capacity_remaining
    charging_cycles:
      name: ${name}_${bms_name}_charging_cycles
#    total_charging_cycle_capacity:
#      name: ${name}_${bms_name}_total_charging_cycle_capacity
    cell_voltage_overvoltage_protection:
      name: ${name}_${bms_name}_voltage_overvoltage_protection
    cell_voltage_overvoltage_recovery:
      name: ${name}_${bms_name}_voltage_overvoltage_recovery
    # cell_voltage_overvoltage_delay:
      # name: ${name}_${bms_name}_voltage_overvoltage_delay
    cell_voltage_undervoltage_protection:
      name: ${name}_${bms_name}_voltage_undervoltage_protection
    cell_voltage_undervoltage_recovery:
      name: ${name}_${bms_name}_voltage_undervoltage_recovery
    # cell_voltage_undervoltage_delay:
      # name: ${name}_${bms_name}_voltage_undervoltage_delay
    total_battery_capacity_setting:
      name: ${name}_${bms_name}_total_battery_capacity_setting
      id: ${bms_name}_total_battery_capacity_setting
    errors_bitmask:
      name: ${name}_${bms_name}_errors_bitmask
    # operation_mode_bitmask:
      # name: ${name}_${bms_name}_operation_mode_bitmask
    # battery_strings:
      # name: ${name}_${bms_name}_battery_strings
  
  - platform: template
    name: ${name}_${bms_name}_battery_charging_current
    id: ${bms_name}_battery_charging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: ${bms_template_update}
    icon: mdi:current-dc 
    lambda: |-
      if (float(id(${bms_name}_current).state)> 0){
        return ( (id(${bms_name}_current).state) );   
      }
      else {
        return 0.0;
      }  
  
  # - platform: template
    # name: ${name}_${bms_name}_battery_charging_power
    # id: ${bms_name}_battery_charging_power
    # unit_of_measurement: "W"
    # accuracy_decimals: 1
    # update_interval: ${bms_template_update}
    # icon: mdi:power  
    # lambda: |-
      # if (float(id(${bms_name}_current).state)> 0){
        # return ( (id(${bms_name}_total_voltage).state) * (id(${bms_name}_current).state) );   
      # }
      # else {
        # return 0.0;
      # }
  - platform: total_daily_energy
    name: ${bms_name}_battery_charging_energy_day
    power_id: ${bms_name}_battery_charging_power
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${bms_name}_battery_charging_energy_day
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${bms_name}_battery_charging_energy_yesteday
    id: template_${bms_name}_battery_charging_energy_yesteday
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${bms_template_update}
    lambda: |-
      return ( id(template_${bms_name}_battery_charging_energy_yesteday).state = id(${bms_name}_battery_charging_energy_yesteday_global) );    

  - platform: template
    name: ${name}_${bms_name}_battery_discharging_current
    id: ${bms_name}_battery_discharging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: ${bms_template_update}
    icon: mdi:current-dc 
    lambda: |-
      if (float(id(${bms_name}_current).state)< 0){
        return ( (id(${bms_name}_current).state) );   
      }
      else {
        return 0.0;
      }    
    
  # - platform: template
    # name: ${name}_${bms_name}_battery_discharging_power
    # id: ${bms_name}_battery_discharging_power
    # unit_of_measurement: "W"
    # accuracy_decimals: 1
    # update_interval: ${bms_template_update}
    # icon: mdi:power  
    # lambda: |-
      # if (float(id(${bms_name}_current).state) < 0){
        # return ( -(id(${bms_name}_total_voltage).state) * (id(${bms_name}_current).state) );   
      # }
      # else {
        # return 0.0;
      # }
      
  - platform: total_daily_energy
    name: ${name}_${bms_name}_battery_discharging_energy_day
    power_id: ${bms_name}_battery_discharging_power
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${bms_name}_battery_discharging_energy_day
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${bms_name}_battery_discharging_energy_yesteday
    id: template_${bms_name}_battery_discharging_energy_yesteday
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${bms_template_update}
    lambda: |-
      return ( id(template_${bms_name}_battery_discharging_energy_yesteday).state = id(${bms_name}_battery_discharging_energy_yesteday_global) );

  - platform: template
    name: ${name}_${bms_name}_c_values
    id: ${name}_${bms_name}_c_values
    unit_of_measurement: "c"
    accuracy_decimals: 3
    update_interval: ${bms_template_update}
    icon: mdi:current-dc
    lambda: |-
        return ( fabs(float(id(${bms_name}_current).state)) / float(id(${bms_name}_total_battery_capacity_setting).state) ); 
        
text_sensor:
    
  - platform: template
    name: ${name}_${bms_name}_remaining_time
    lambda: |-
      if(id(${bms_name}_current).state<0) {
        int seconds = int(id(${bms_name}_capacity_remaining).state*0.01*id(${bms_name}_total_battery_capacity_setting).state/(-id(${bms_name}_current).state)*(3600));
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600); 
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Discharging time to go: " + std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s").c_str() };
      }
      else if(id(${bms_name}_current).state>0){
        int seconds = int((1.0-float(id(${bms_name}_capacity_remaining).state)*0.01)*float(id(${bms_name}_total_battery_capacity_setting).state)/float(id(${bms_name}_current).state)*(3600));
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600); 
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Charging time to go: " + std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s").c_str() };
      }
      else{
        return {""};
      }
    icon: mdi:clock-start
    update_interval: ${bms_text_update}  

  - platform: jk_bms
    jk_bms_id: ${bms_name}_bms
    errors:
      name: ${name}_${bms_name}_errors)
    operation_mode:
      name: ${name}_${bms_name}_operation_mode)
    # battery_type:
      # name: ${name}_${bms_name}_battery_type)
    # password:
      # name: ${name}_${bms_name}_password)
    # device_type:
      # name: ${name}_${bms_name}_device_type)
    # software_version:
      # name: ${name}_${bms_name}_software_version)
    # manufacturer:
      # name: ${name}_${bms_name}_manufacturer)
